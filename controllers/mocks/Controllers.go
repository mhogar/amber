// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	controllers "authserver/controllers"

	mock "github.com/stretchr/testify/mock"

	models "authserver/models"

	requesterror "authserver/common/request_error"

	uuid "github.com/google/uuid"
)

// Controllers is an autogenerated mock type for the Controllers type
type Controllers struct {
	mock.Mock
}

// CreateTokenFromPassword provides a mock function with given fields: CRUD, username, password, clientID, scopeName
func (_m *Controllers) CreateTokenFromPassword(CRUD controllers.TokenControllerCRUD, username string, password string, clientID uuid.UUID, scopeName string) (*models.AccessToken, requesterror.OAuthRequestError) {
	ret := _m.Called(CRUD, username, password, clientID, scopeName)

	var r0 *models.AccessToken
	if rf, ok := ret.Get(0).(func(controllers.TokenControllerCRUD, string, string, uuid.UUID, string) *models.AccessToken); ok {
		r0 = rf(CRUD, username, password, clientID, scopeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessToken)
		}
	}

	var r1 requesterror.OAuthRequestError
	if rf, ok := ret.Get(1).(func(controllers.TokenControllerCRUD, string, string, uuid.UUID, string) requesterror.OAuthRequestError); ok {
		r1 = rf(CRUD, username, password, clientID, scopeName)
	} else {
		r1 = ret.Get(1).(requesterror.OAuthRequestError)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: CRUD, username, password
func (_m *Controllers) CreateUser(CRUD controllers.UserControllerCRUD, username string, password string) (*models.User, requesterror.RequestError) {
	ret := _m.Called(CRUD, username, password)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(controllers.UserControllerCRUD, string, string) *models.User); ok {
		r0 = rf(CRUD, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 requesterror.RequestError
	if rf, ok := ret.Get(1).(func(controllers.UserControllerCRUD, string, string) requesterror.RequestError); ok {
		r1 = rf(CRUD, username, password)
	} else {
		r1 = ret.Get(1).(requesterror.RequestError)
	}

	return r0, r1
}

// DeleteAllOtherUserTokens provides a mock function with given fields: CRUD, token
func (_m *Controllers) DeleteAllOtherUserTokens(CRUD controllers.TokenControllerCRUD, token *models.AccessToken) requesterror.RequestError {
	ret := _m.Called(CRUD, token)

	var r0 requesterror.RequestError
	if rf, ok := ret.Get(0).(func(controllers.TokenControllerCRUD, *models.AccessToken) requesterror.RequestError); ok {
		r0 = rf(CRUD, token)
	} else {
		r0 = ret.Get(0).(requesterror.RequestError)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: CRUD, token
func (_m *Controllers) DeleteToken(CRUD controllers.TokenControllerCRUD, token *models.AccessToken) requesterror.RequestError {
	ret := _m.Called(CRUD, token)

	var r0 requesterror.RequestError
	if rf, ok := ret.Get(0).(func(controllers.TokenControllerCRUD, *models.AccessToken) requesterror.RequestError); ok {
		r0 = rf(CRUD, token)
	} else {
		r0 = ret.Get(0).(requesterror.RequestError)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: CRUD, user
func (_m *Controllers) DeleteUser(CRUD controllers.UserControllerCRUD, user *models.User) requesterror.RequestError {
	ret := _m.Called(CRUD, user)

	var r0 requesterror.RequestError
	if rf, ok := ret.Get(0).(func(controllers.UserControllerCRUD, *models.User) requesterror.RequestError); ok {
		r0 = rf(CRUD, user)
	} else {
		r0 = ret.Get(0).(requesterror.RequestError)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: CRUD, user, oldPassword, newPassword
func (_m *Controllers) UpdateUserPassword(CRUD controllers.UserControllerCRUD, user *models.User, oldPassword string, newPassword string) requesterror.RequestError {
	ret := _m.Called(CRUD, user, oldPassword, newPassword)

	var r0 requesterror.RequestError
	if rf, ok := ret.Get(0).(func(controllers.UserControllerCRUD, *models.User, string, string) requesterror.RequestError); ok {
		r0 = rf(CRUD, user, oldPassword, newPassword)
	} else {
		r0 = ret.Get(0).(requesterror.RequestError)
	}

	return r0
}
