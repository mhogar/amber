// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	data "authserver/data"
	models "authserver/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DataExecutor is an autogenerated mock type for the DataExecutor type
type DataExecutor struct {
	mock.Mock
}

// CreateMigration provides a mock function with given fields: timestamp
func (_m *DataExecutor) CreateMigration(timestamp string) error {
	ret := _m.Called(timestamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields:
func (_m *DataExecutor) CreateTransaction() (data.Transaction, error) {
	ret := _m.Called()

	var r0 data.Transaction
	if rf, ok := ret.Get(0).(func() data.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessToken provides a mock function with given fields: token
func (_m *DataExecutor) DeleteAccessToken(token *models.AccessToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllOtherUserTokens provides a mock function with given fields: token
func (_m *DataExecutor) DeleteAllOtherUserTokens(token *models.AccessToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClient provides a mock function with given fields: id
func (_m *DataExecutor) DeleteClient(id uuid.UUID) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMigrationByTimestamp provides a mock function with given fields: timestamp
func (_m *DataExecutor) DeleteMigrationByTimestamp(timestamp string) error {
	ret := _m.Called(timestamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: user
func (_m *DataExecutor) DeleteUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccessTokenByID provides a mock function with given fields: ID
func (_m *DataExecutor) GetAccessTokenByID(ID uuid.UUID) (*models.AccessToken, error) {
	ret := _m.Called(ID)

	var r0 *models.AccessToken
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.AccessToken); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByID provides a mock function with given fields: ID
func (_m *DataExecutor) GetClientByID(ID uuid.UUID) (*models.Client, error) {
	ret := _m.Called(ID)

	var r0 *models.Client
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Client); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestTimestamp provides a mock function with given fields:
func (_m *DataExecutor) GetLatestTimestamp() (string, bool, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMigrationByTimestamp provides a mock function with given fields: timestamp
func (_m *DataExecutor) GetMigrationByTimestamp(timestamp string) (*models.Migration, error) {
	ret := _m.Called(timestamp)

	var r0 *models.Migration
	if rf, ok := ret.Get(0).(func(string) *models.Migration); ok {
		r0 = rf(timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Migration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ID
func (_m *DataExecutor) GetUserByID(ID uuid.UUID) (*models.User, error) {
	ret := _m.Called(ID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *DataExecutor) GetUserByUsername(username string) (*models.User, error) {
	ret := _m.Called(username)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAccessToken provides a mock function with given fields: token
func (_m *DataExecutor) SaveAccessToken(token *models.AccessToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccessToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveClient provides a mock function with given fields: client
func (_m *DataExecutor) SaveClient(client *models.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: user
func (_m *DataExecutor) SaveUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields:
func (_m *DataExecutor) Setup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClient provides a mock function with given fields: client
func (_m *DataExecutor) UpdateClient(client *models.Client) (bool, error) {
	ret := _m.Called(client)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Client) bool); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *DataExecutor) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
