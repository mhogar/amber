name: CI
on: [push, pull_request]
env:
  CFG_ENV: test
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"

    - uses: actions/checkout@v2

    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

    # Cache go mod cache, used to speedup builds
    - name: Go Mod Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Build
      run: go build -v ./...

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"

    - uses: actions/checkout@v2

    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

    # Cache go mod cache, used to speedup builds
    - name: Go Mod Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    
    - name: Run Unit Tests
      run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./controllers/ ./controllers/password_helpers/ ./data/ ./models/ ./router/ ./router/handlers/ ./server/ ./tools/admin_creator/ ./tools/migration_runner/

    - name: Install Goveralls
      run: go install github.com/mattn/goveralls@latest

    - name: Send Coverage
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: goveralls -coverprofile=coverage.out -service=github

  integration:
    name: Integration and E2E Tests
    needs: build
    runs-on: ubuntu-latest
    # need to run in container so we can install the psql client
    container: golang:latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"

    - uses: actions/checkout@v2

    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

    # Cache go mod cache, used to speedup builds
    - name: Go Mod Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Create Database
      run: |
        apt-get update
        apt-get install --yes postgresql-client
        PGPASSWORD=password psql -h postgres -U postgres -c 'CREATE DATABASE ci_test;'

    - name: Run Migrations
      run: go run tools/migration_runner/main.go -db=integration

    - name: Create Admin User
      run: go run tools/admin_creator/main.go -db=integration -username=admin -password=Admin123!

    - name: Run Integration Tests
      run: go test ./testing/integration/ -v

    - name: Run End-to-End Tests
      run: go test ./testing/e2e/ -v
